basePath: /bookapi/
definitions:
  models.Book:
    properties:
      author:
        description: Name of the author.
        example: Alan Donovan
        type: string
      id:
        example: 1
        type: integer
      pages:
        description: Number of pages.
        example: 380
        type: integer
      title:
        description: Title of the book.
        example: The Go Programming Language
        type: string
    type: object
  models.ErrorResponse:
    properties:
      error:
        description: Stringified Error Object
        type: string
      message:
        description: Customized Error Message
        example: Book not found.
        type: string
    type: object
  models.SuccessResponse:
    properties:
      data: {}
      meta: {}
    type: object
  models.TransferRequest:
    properties:
      from_id:
        description: Unique ID of the book that provides pages.
        example: 1
        type: integer
      pages:
        description: Number of pages transferred
        example: 50
        type: integer
      to_id:
        description: Unique ID of the book that receives pages
        example: 2
        type: integer
    type: object
host: localhost:8080
info:
  contact:
    email: giorgiocarloroberto.albieri@gmail.com
    name: Giorgio Albieri
  description: Sample server for managing books from ancient roman history and computer
    science.
  license:
    name: Sapienza
    url: https://opensource.org/licenses/Sapienza
  termsOfService: http://example.com/terms
  title: BookAPI
  version: "1.0"
paths:
  /books:
    get:
      description: Returns all books stored in the database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Book'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all books
      tags:
      - books
    post:
      consumes:
      - application/json
      description: Adds a new book to the database
      parameters:
      - description: Book to create
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/models.Book'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new book
      tags:
      - books
  /books/{id}:
    delete:
      description: Delete a book from the database based on the input ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete book by ID
      tags:
      - books
    get:
      description: Retrieves a book by its ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get book by ID
      tags:
      - books
    put:
      consumes:
      - application/json
      description: Replace an existing book with a new instance
      parameters:
      - description: Updated Book
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/models.Book'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update a book
      tags:
      - books
  /books/transfer:
    post:
      consumes:
      - application/json
      description: Move a number of pages from book having id=from_id to book having
        id=to_id
      parameters:
      - description: Pages transfer data
        in: body
        name: transferpages
        required: true
        schema:
          $ref: '#/definitions/models.TransferRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Transfer pages between two books
      tags:
      - books
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
